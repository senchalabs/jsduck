#!/usr/bin/env ruby
# JsDuck is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# JsDuck is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with JsDuck.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2010 Rene Saarsoo.

# For running when gem not installed
$:.unshift File.dirname(File.dirname(__FILE__)) + "/lib"

require 'jsduck/app'
require 'optparse'

app = JsDuck::App.new
app.template_dir = File.dirname(File.dirname(__FILE__)) + "/template"

opts = OptionParser.new do | opts |
  opts.banner = "Usage: jsduck [options] files/dirs...\n\n"

  opts.on('-o', '--output=PATH',
    "Directory to output all this amazing documentation.",
    "This option MUST be specified.", " ") do |path|
    app.output_dir = path
  end

  opts.on('--ignore-global', "Turns off the creation of global class.", " ") do
    app.ignore_global = true
  end

  opts.on('--private-classes', "Include private classes to docs.", " ") do
    app.show_private_classes = true
  end

  opts.on('--external=CLASSNAME',
    "Declares an external class.  When declared as",
    "external, inheriting from this class will not",
    "trigger warnings.  Useful when you are extending",
    "a class for which you can not supply source code.", " ") do |classname|
    app.external_classes << classname
  end

  opts.on('--no-warnings', "Turns off warnings.", " ") do
    app.warnings = false
  end

  opts.on('-v', '--verbose', "This will fill up your console.", " ") do
    app.verbose = true
  end

  opts.separator "Customizing output:"
  opts.separator ""

  opts.on('--title=TEXT',
    "Custom title for the documentation app.",
    "Defaults to 'ExtJS API Documentation'", " ") do |text|
    app.title = text
  end

  opts.on('--footer=TEXT',
    "Custom footer text for the documentation app.",
    "Defaults to: 'Generated with JSDuck.'", " ") do |text|
    app.footer = text
  end

  opts.on('--append-html=HTML', "Extra code to append to the index.html page.", " ") do |html|
    app.append_html = html
  end

  opts.on('--guides=PATH', "Path to guides directory.",
    "Each subdirectory of that is treated as a guide",
    "and is expectd to contain a REAME.md file,",
    "which will be converted into a README.js.", " ") do |path|
    app.guides_dir = path
  end

  opts.on('--guides-order=a,b,c', Array,
    "The order in which the guides should appear. When",
    "a guide name is not specified here, it will be excluded.",
    "You don't have to write the whole name of the guide,",
    "just the beginning of it, as long as it's unique.", " ") do |list|
    app.guides_order = list
  end

  opts.on('--categories=PATH',
    "Path to JSON file which defines categories for classes.", " ") do |path|
    app.categories_path = path
  end

  opts.on('--link=TPL',
    "HTML template for replacing {@link}.",
    "Possible placeholders:",
    "%c - full class name (e.g. 'Ext.Panel')",
    "%m - class member name prefixed with member type",
    "     (e.g. 'method-urlEncode')",
    "%# - inserts '#' if member name present",
    "%- - inserts '-' if member name present",
    "%a - anchor text for link",
    "Default is: '<a href=\"#/api/%c%-%m\" rel=\"%c%-%m\" class=\"docClass\">%a</a>'", " ") do |tpl|
    app.link_tpl = tpl
  end

  opts.on('--img=TPL',
    "HTML template for replacing {@img}.",
    "Possible placeholders:",
    "%u - URL from @img tag (e.g. 'some/path.png')",
    "%a - alt text for image",
    "Default is: '<p><img src=\"doc-resources/%u\" alt=\"%a\"></p>'", " ") do |tpl|
    app.img_tpl = tpl
  end

  opts.on('--json', "Produces JSON export instead of HTML documentation.", " ") do
    app.export = :json
  end

  opts.on('--stdout', "Sends the output to STDOUT instead of writing to the filesystem", " ") do
    app.output_to_stdout = true
  end

  opts.separator "Debugging:"
  opts.separator ""

  # For debugging it's often useful to set --processes=0 to get deterministic results.
  opts.on('-p', '--processes=COUNT',
    "The number of parallel processes to use.",
    "Defaults to the number of processors/cores.",
    "Set to 0 to disable parallel processing completely.", " ") do |count|
    app.processes = count.to_i
  end

  opts.on('--template=PATH',
    "Directory containing doc-browser UI template.", " ") do |path|
    app.template_dir = path
  end

  opts.on('--template-links',
    "Instead of copying template files, create symbolic",
    "links.  Useful for template files development.",
    "Only works on platforms supporting symbolic links.", " ") do
    app.template_links = true
  end

  opts.on('--extjs-path=PATH',
    "Path for main ExtJS JavaScript file.  Useful for specifying",
    "something different than extjs/ext-all.js", " ") do |path|
    app.extjs_path = path
  end

  opts.on('-h', '--help', "Prints this help message", " ") do
    puts opts
    exit
  end

end

js_files = []
# scan directories for .js files
opts.parse!(ARGV).each do |fname|
  if File.exists?(fname)
    if File.directory?(fname)
      Dir[fname+"/**/*.{js,css,scss}"].each {|f| js_files << f }
    else
      js_files << fname
    end
  else
    $stderr.puts "Warning: File #{fname} not found"
  end
end
app.input_files = js_files

if app.input_files.length == 0
  puts "You should specify some input files, otherwise there's nothing I can do :("
  exit(1)
elsif !app.output_to_stdout and !app.output_dir
  puts "You should also specify an output directory, where I could write all this amazing documentation."
  exit(1)
elsif !app.output_to_stdout and File.exists?(app.output_dir) && !File.directory?(app.output_dir)
  puts "Oh noes!  The output directory is not really a directory at all :("
  exit(1)
elsif !app.output_to_stdout and !File.exists?(File.dirname(app.output_dir))
  puts "Oh noes!  The parent directory for #{app.output_dir} doesn't exist."
  exit(1)
elsif !app.output_to_stdout and !File.exists?(app.template_dir + "/extjs")
  puts "Oh noes!  The template directory does not contain extjs/ directory :("
  puts "Please copy ExtJS over to template/extjs or create symlink."
  puts "For example:"
  puts "    $ cp -r /path/to/ext-4.0.0 " + app.template_dir + "/extjs"
  exit(1)
elsif !app.output_to_stdout and !File.exists?(app.template_dir + "/resources/css")
  puts "Oh noes!  CSS files for custom ExtJS theme missing :("
  puts "Please compile SASS files in template/resources/sass with compass."
  puts "For example:"
  puts "    $ compass compile " + app.template_dir + "/resources/sass"
  exit(1)
end

app.run()
